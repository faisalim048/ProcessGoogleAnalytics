<?php

/**
 * Google Analytics Process Module v 1.1.3
 * View your Google Analytics Statistics in the Processwire Admin Panel
 *
 * @author Stefan Wanzenried (Wanze)
 * http://processwire.com/talk/user/582-wanze/	
 * http://www.everchanging.ch
 *
 * ProcessWire 2.x 
 * Copyright (C) 2011 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 * 
 * Notes:
 * This Module uses the 'Google APIs Client Library for PHP' to query the Statistics
 * http://code.google.com/p/google-api-php-client/
 *
 * To display the charts with javascript, the jquery plugin 'jqplot' is used
 * http://www.jqplot.com/
 */

class ProcessGoogleAnalytics extends Process implements Module, ConfigurableModule {
		
	private $ga_client = null;
	private $ga_service = null;
	private $cache = null;
	private $errors = false;
	
	const PAGE_NAME = 'google-analytics';
	const PERMISSION_NAME = 'ga-view';
	const FACTOR_WIDTH_PERCENT = 0.7;
	
	protected static $defaults = array(
		'clientId' => '',
		'clientSecret' => '',
		'redirectUri' => '',
		'developerKey' => '',
		'accountId' => '',
		'accessToken' => '',
		'startDate' => '',
		'endDate' => '',
		'maxResults' => 30,
		'cacheTime' => 10800,
		'dateFormat' => '%d %B %Y',
		'chartColor' => '#DB1174',
		'dateFormatInput' => 'Y-m-d',
		'dateRange' => 'm1',
		'compareToPrevious' => 0,
	);
	
	//Holds the name of cache files generated by MarkupCache. Used by _clearCache Method
	protected static $cacheFiles = array(
		'ga_audience_demographics',
		'ga_audience_mobile',
		'ga_audience_system',
		'ga_audience_visits',
		'ga_audience_visits_stats',
		'ga_content_pageviews',
		'ga_content_stats',
		'ga_traffic_sources_keywords',
		'ga_traffic_sources_referral',
		'ga_traffic_sources_stats',
	);
	
	//Default Date ranges to choose in the Modules options
	protected static $dates = array(
			'd1' => 'last 24 hours',
			'd2' => 'last 2 days',
			'd3' => 'last 3 days',
			'd4' => 'last 4 days',
			'd5' => 'last 5 days',
			'd6' => 'last 6 days',
			'd7' => 'last week',
			'd14' => 'last 2 weeks',
			'd21' => 'last 3 weeks',
			'm1' => 'last month',
			'm2' => 'last 2 months',
			'm3' => 'last 3 months',
		);
	
		
	/**
	 * getModuleInfo is a method required by all modules to tell ProcessWire about them
	 * 
	 * @access public
	 * @static
	 * @return void
	 */
	public static function getModuleInfo() {

		return array(
			'title' => __('Google Analytics',__FILE__),         
			'summary' => __('View your Google Analytics Statistics in the Processwire Admin Panel',__FILE__),
			'version' => 113,
			'href' => 'http://processwire.com/talk/topic/1609-processgoogleanalytics/', 
			'permanent' => false, 
			'permission' => self::PERMISSION_NAME,
		);

	}
	
	/**
	 * Check the config, initialize some variables and load all neccessary 3thparty Javascript / Css
	 * 
	 * @access public
	 * @return void
	 */
	public function init() {

		if ($this->_checkConfig()) {
			$this->config->scripts->add($this->config->urls->ProcessGoogleAnalytics . "jqplot/jquery.jqplot.min.js");
			$this->config->scripts->add($this->config->urls->ProcessGoogleAnalytics . "jqplot/excanvas.min.js"); //for IE
			$this->config->styles->add($this->config->urls->ProcessGoogleAnalytics  . "jqplot/jquery.jqplot.min.css");
			$this->config->scripts->add($this->config->urls->ProcessGoogleAnalytics . "jqplot/plugins/jqplot.dateAxisRenderer.min.js");		
			$this->config->scripts->add($this->config->urls->ProcessGoogleAnalytics . "jqplot/plugins/jqplot.highlighter.min.js");		
			$this->_loadGoogleApi();
			$this->cache = $this->modules->get('MarkupCache');
			$this->modules->get('JqueryWireTabs');			
			
			//Make sure all config variables are set in modules data 
			$config = array_merge(self::$defaults, $this->data);
			foreach ($config as $k => $v) $this->set($k, $v);
			
			$this->startDateCompare = false;
			//Dates: If the dates are empty, set the endDate as today and the startDate back according the date range
			if ($this->startDate == '') {
				$rangeType = $this->dateRange[0]; //d = days, m = months
				$rangeValue = (int) substr($this->dateRange,1);
				switch ($rangeType) {
					case 'd':
						$this->startDate = date('Y-m-d',mktime(0,0,0,date('m'),date('d')-$rangeValue,date('Y')));
						if ($this->compareToPrevious) $this->startDateCompare = date('Y-m-d', strtotime("-{$rangeValue} days", strtotime($this->startDate)));
						break;
					case 'm':
						$this->startDate = date('Y-m-d',mktime(0,0,0,date('m')-$rangeValue,date('d'),date('Y')));
						if ($this->compareToPrevious) $this->startDateCompare = date('Y-m-d', strtotime("-{$rangeValue} months", strtotime($this->startDate)));
						break;
					default:
						$this->startDate = date('Y-m-d',mktime(0,0,0,date('m')-1,date('d'),date('Y')));					
						if ($this->compareToPrevious) $this->startDateCompare = date('Y-m-d', strtotime("-{$rangeValue} months", strtotime($this->startDate)));
				}
			}
			$this->endDate = ($this->endDate == '') ? date('Y-m-d') : $this->endDate;
			//Make some config variables available in javascript
			$page = $this->pages->get('template=admin, name='.self::PAGE_NAME);
			$ga_url = ($page->id) ? $page->url : ''; 
			$this->config->js('ga_url', $ga_url);
			$chartColor = $this->chartColor ? $this->chartColor : self::$defaults['chartColor'];
			$this->config->js('ga_chart_color',$chartColor);
			return parent::init();
		}		

	}

	
	/**
	 * Install module
	 * Create a page and assign this process, create Permission 'ga-view'
	 * 
	 * @access public
	 * @return void
	 */
	public function ___install() { 
		
		parent::___install();		
		$page = $this->pages->get('template=admin,name='.self::PAGE_NAME);
		if (!$page->id) {
			$page = new Page();
			$page->template = $this->templates->get('admin');
			$page->parent = $this->pages->get($this->config->adminRootPageID);
			$page->title = 'Google Analytics';
			$page->name = self::PAGE_NAME;
			$page->process = $this;
			$page->save();			
		}
		$permission = $this->permissions->get(self::PERMISSION_NAME);
		if (!$permission->id) {
			$p = new Permission();
			$p->name = self::PERMISSION_NAME;
			$p->title = $this->_('View Google Analytics Page');
			$p->save();			
		}

	}

	
	/**
	 * Uninstall module
	 * Delete the page 'google-analytics' and Permission 'ga-view'
	 * 
	 * @access public
	 * @return void
	 */
	public function ___uninstall() {

		parent::___uninstall();		
		$permission = $this->permissions->get(self::PERMISSION_NAME);
		if ($permission->id) {
			$permission->delete();		
		}
		$page = $this->pages->get('template=admin,name='.self::PAGE_NAME);
		if ($page->id) {
			$page->delete();		
		}
		$this->_clearCache();
		
	}

	
	/**
	 * Check for errors and return either Authenticate with Oauth / Choose GA Account Dropdown / HTML-Markup to display Statistics
	 * 
	 * @access public
	 * @return html
	 */
	public function ___execute() { 
				
		if (!$this->errors) {
			if ($this->accessToken) { //Do we have an accessToken?
				if ($this->ga_client->getAccessToken()) {
					if ($this->accountId) { //Account already chosen -> generate HTML markup
						return $this->_renderInterface();
					} else { //No account saved, display dropdown to choose Account
						return $this->_selectAccount();
					}
				}
			} else { //Handle Oauth with google
				return $this->_authenticate();
			}
		}
				
	}
		
	
	/**
	 * Clear the Cache files generated by MarkupCache
	 * 
	 * @access private
	 * @return void
	 */
	private function _clearCache() {
		
		foreach (self::$cacheFiles as $file) {
			$this->cache->get($file,0);
		}
		
	}
	
	
	/**
	 * Helper function to store new config options for this module in Database
	 * 
	 * @access private
	 * @param array $data new config values
	 * @return void
	 */
	private function _saveModuleConfig(array $data) {

		$cfg = array_merge($this->data,$data);
		$this->modules->saveModuleConfigData($this,$cfg);

	}
	
	/**
	 * Helper function to format a ga array with dates as JSON. (For the chart rendered with jqplot)
	 * 
	 * @access private
	 * @param mixed $data
	 * @return json
	 */
	private function _formatChartJSON($data){
	
		$ga_data = array();
		foreach ($data['rows'] as $v) {
			if (count($v) == 3) { //Date and Time requested..
				$key = date('Y-m-d H:00', strtotime($v[0]." ".$v[1].":00"));
				$value = (int)$v[2]; //json_encode encodes as string when not casted to int
			} else {
				$key = date('Y-m-d', strtotime($v[0]));
				$value = (int)$v[1]; 			
			}
			$ga_data[] = array($key,$value);
		}
		return json_encode(array($ga_data));

	}
	
	/**
	 * Helper function to render the html tables with 3 columns
	 * 
	 * @access private
	 * @param array $data Contains one or multiple tables
	 * @param string $scope Scope to build a unique ID for the table
	 * @param $totalFrom (default = 'visits') Calculate total from this ga metric (ga:visits,ga:pageviews etc.)
	 * @return html
	 */
	private function _renderStatisticsTables($data, $scope, $totalFrom='visits') {
	    
	    $i = 0;
  		$output = '';
  		foreach ($data as $dimension => $arr) { //First loop: tables, if multiple
      		$display = $i == 0 ? "" : " style='display:none;'"; //Only display the first table
      		$id = "table_{$scope}_{$dimension}";
   			$title = $this->_(ucfirst($dimension)); //The Key of the table array is used to build the title in the first column
   			$output .= "<table class='ga_table toggle_element' id='{$id}'{$display}>";
   			$output .= "<tr>";
   			$output .= "<th class='bg_linear_gradient'>{$title}</th>";
   			$output .= "<th class='bg_linear_gradient'>".$this->_(ucfirst($totalFrom))."</th>";
   			$output .= "<th class='bg_linear_gradient'>".$this->_('% ' . ucfirst($totalFrom))."</th>";
   			$output .= "</tr>";
      		//Check for existing rows before looping...
      		if (isset($arr['rows']) && count($arr['rows']) > 0) {
	   			$total = $arr['totalsForAllResults']["ga:{$totalFrom}"];
	   			$count = count($arr['rows']);
	   			foreach ($arr['rows'] as $k => $value) { //Data Loop
		   			$title = $value[0];
		   			$visits = $value[1];
		   			$percent = (100 / $total) * $visits;
		   			$width = (int)($percent * self::FACTOR_WIDTH_PERCENT);
		   			$percent_str = number_format($percent,2) . ' %';
		   			$display = ($k > 9) ? " style='display:none;'" : "";
		   			$output .= "<tr{$display}>";
		   			$output .= "<td>{$title}</td><td>{$visits}</td><td><div class='percent' style='width: {$width}px;'></div>{$percent_str}</td>";
		   			$output .= "</tr>";
		   			$j = $k+1;
		   			if ($j % 10 == 0 && $j != 1 && $j != $count) {
			   			$n = $count-$j;
			   			$output .= "<tr{$display}>";
			   			$output .= "<td colspan='3' class='more_rows'><a href='#' class='ga_display_more_rows'>".$this->_('view more')." ({$n})</a></td>";
			   			$output .= "</tr>";
		   			}
	   			}	      		
      		} else {
	      		$output .= "<tr><td colspan='3'>".$this->_('no results found')."</td></tr>";
      		}
   			$output .= "</table>";   			
   			$i++;
  		}
  		return $output;

	}
	
	/**
	 * Get Audience Visits by Date (called via Ajax)
	 * 
	 * @access public
	 * @return json
	 */
	public function ___executeAudiencevisits() {
		
		if (!$data = $this->cache->get("ga_audience_visits",$this->cacheTime)) {						
			$metrics = "ga:visits";
			$dimensions = "ga:date";
			//If start and end date are near, query also the hours
			$end = strtotime($this->endDate) / 60 / 60 / 24;
			$start = strtotime($this->startDate) / 60 / 60 / 24;
			if ($end - $start <= 3) $dimensions .= ", ga:hour";
			$opt = array(
				'dimensions' => $dimensions,
				'sort' => $dimensions,
			);
			$data = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics,$opt);
			$data = $this->_formatChartJSON($data);
        	$this->cache->save($data);
        }
        echo $data;
	}
	
	
	/**
	 * Get Audience Visits Stats (called via Ajax)
	 * 
	 * @access public
	 * @return json
	 */
	public function ___executeAudiencevisitsstats() {
		
		if (!$data = $this->cache->get("ga_audience_visits_stats",$this->cacheTime)) {						
			$metrics = "ga:visitors,ga:newVisits,ga:percentNewVisits,ga:visits,ga:bounces,ga:pageviews,ga:visitBounceRate,ga:timeOnSite,ga:avgTimeOnSite";
			$data = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics);
        	$data = $data['totalsForAllResults'];
        	//Compare data to previous date range?
        	$data_compare = false;
        	if ($this->compareToPrevious && $this->startDateCompare) {
				$data_compare = $this->ga_service->data_ga->get($this->accountId,$this->startDateCompare,$this->startDate,$metrics);
				$data_compare = $data_compare['totalsForAllResults'];
        	}
        	$titles = array(
        		'ga:visits' => $this->_('Visits Total'),
        		'ga:visitors' => $this->_('Unique Visitors'),
        		'ga:newVisits' => $this->_('New Visits'),
        		'ga:pageviews' => $this->_('Pageviews'),        		
        		'ga:percentNewVisits' => $this->_('New Visits'),
        		'ga:returningVisits' => $this->_('Returning Visits'),
        		'ga:visitBounceRate' => $this->_('Bounce Rate'),
        		'ga:avgTimeOnSite' => $this->_('Avg. Visit Duration'),
        	);
   			$table  = "<table class='ga_table ga_table_highlight' id='ga_table_audience_stats'>";
   			$table .= "<tr>";
   			$i=0;
   			$columns = 4;
   			$tdwidth = 100 / $columns;
   			foreach ($titles as $k => $title) {
   				if($i % $columns == 0) $table .= "</tr><tr>";
   				$value = (array_key_exists($k,$data)) ? $data[$k] : '';
   				$valueF = ''; //Value formated
   				$valueCompare = null;
   				switch($k){
   					case 'ga:percentNewVisits':
   					case 'ga:visitBounceRate':
   						$valueF = number_format($value,2) . ' %';
   						break;
   					case 'ga:avgTimeOnSite':
   						$valueF = gmdate('H:i:s',$value);
   						break;
   					case 'ga:returningVisits':
   						$value = $data['ga:visits'] - $data['ga:newVisits'];
   						$valueF = number_format($value);
   						break;
   					default:
   						$valueF = number_format($value);
   						if ($data_compare && isset($data_compare[$k])) $valueCompare = $value - $data_compare[$k];
   				}
   				$table .= "<td style='width: {$tdwidth}%;' class='bg_linear_gradient'>{$valueF}<div class='desc'>{$title}";
   				if ($data_compare && $valueCompare != null) {
	   				$class = ($valueCompare < 0) ? "minus" : "plus";
		   			$valueCompareF = ($valueCompare < 0) ? str_replace('-', '- ', number_format($valueCompare)) : '+ ' . number_format($valueCompare);
	   				$table .= "<span class='compare {$class}'>{$valueCompareF}</span>";
   				}
   				$table .= "</div></td>";
   				$i++;
   			}
   			$table .= "</tr>";
   			$table .= "</table>";
   			$data = $table;
        	$this->cache->save($data);
        }
        echo $data;
		
	}
	
	/**
	 * Get demographics statistics (Visits by Countries / Cities / Languages) (called via Ajax)
	 * 
	 * @access public
	 * @return html
	 */
	public function ___executeAudiencedemographics() {
				
		if (!$data = $this->cache->get("ga_audience_demographics",$this->cacheTime)) {						
			$metrics = "ga:visits";
			$opt = array(
				'dimensions' => 'ga:country',
				'sort' => '-ga:visits',
				'max-results' => $this->maxResults,
			);
			$data = array();
			$data_countries = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics,$opt);
        	$opt['dimensions'] = 'ga:city';
			$data_cities = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics,$opt);
        	$opt['dimensions'] = 'ga:language';
			$data_languages = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics,$opt);        	
      		$data['country'] = $data_countries;
      		$data['city'] = $data_cities;
      		$data['language'] = $data_languages;      		
        	$data = $this->_renderStatisticsTables($data,'demographics');
        	$this->cache->save($data);
        }
        echo $data;

	}		

	/**
	 * Get System Statistics (Visits by Browser / OS / Resolution) (called via Ajax)
	 * 
	 * @access public
	 * @return html
	 */
	public function ___executeAudiencesystem() {
				
		if (!$data = $this->cache->get("ga_audience_system",$this->cacheTime)) {						
			$metrics = "ga:visits";
			$opt = array(
				'dimensions' => 'ga:browser',
				'sort' => '-ga:visits',
				'max-results' => $this->maxResults,
			);
			$data = array();
			$data_browser = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics,$opt);
        	$opt['dimensions'] = 'ga:operatingSystem';
			$data_os = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics,$opt);
        	$opt['dimensions'] = 'ga:screenResolution';
			$data_resolution = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics,$opt);        	
      		$data['browser'] = $data_browser;
      		$data['os'] = $data_os;
      		$data['resolution'] = $data_resolution;      		
      		$data = $this->_renderStatisticsTables($data,'system');
        	$this->cache->save($data);
        }
        echo $data;

	}		

	/**
	 * Get Mobile Statistics (Visits by OS / Resolution) (called via Ajax)
	 * 
	 * @access public
	 * @return html
	 */
	public function ___executeAudiencemobile() {
				
		if (!$data = $this->cache->get("ga_audience_mobile",$this->cacheTime)) {						
			$metrics = "ga:visits";
			$opt = array(
				'dimensions' => 'ga:operatingSystem',
				'sort' => '-ga:visits',
				'max-results' => $this->maxResults,
				'segment' => 'gaid::-11',
			);
			$data = array();
			$data_os = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics,$opt);
        	$opt['dimensions'] = 'ga:screenResolution';
			$data_resolution = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics,$opt);        	
      		$data['os'] = $data_os;
      		$data['resolution'] = $data_resolution;      		
      		$data = $this->_renderStatisticsTables($data,'mobile');
        	$this->cache->save($data);
        }
        echo $data;

	}		
	
	/**
	 * Get Content Pageviews by Date (called via Ajax)
	 * 
	 * @access public
	 * @return json
	 */
	public function ___executeContentpageviews() {
		
		if (!$data = $this->cache->get("ga_content_pageviews",$this->cacheTime)) {						
			$metrics = "ga:pageviews";
			$dimensions = "ga:date";
			//If start and end date are near, query also the hours
			$end = strtotime($this->endDate) / 60 / 60 / 24;
			$start = strtotime($this->startDate) / 60 / 60 / 24;
			if ($end - $start <= 3) $dimensions .= ", ga:hour";			
			$opt = array(
				'dimensions' => $dimensions,
				'sort' => $dimensions,
			);
			$data = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics,$opt);
        	$data = $this->_formatChartJSON($data);
        	$this->cache->save($data);
        }
        echo $data;
	}

	/**
	 * Get Content Stats (called via Ajax)
	 * 
	 * @access public
	 * @return json
	 */
	public function ___executeContentstats() {
		
		if (!$data = $this->cache->get("ga_content_stats",$this->cacheTime)) {						
			//1st: Get Pageviews and Unique Pageviews
			$metrics = "ga:pageviews,ga:uniquePageviews";
			$data = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics);
        	$output = '';
        	if (isset($data['totalsForAllResults'])) {
	        	$data = $data['totalsForAllResults'];
	        	//Compare data to previous date range?
	        	$data_compare = false;
	        	if ($this->compareToPrevious && $this->startDateCompare) {
					$data_compare = $this->ga_service->data_ga->get($this->accountId,$this->startDateCompare,$this->startDate,$metrics);
					$data_compare = $data_compare['totalsForAllResults'];
	        	}	        	
	        	$titles = array(
	        		'ga:pageviews' => $this->_('Pageviews Total'),
	        		'ga:uniquePageviews' => $this->_('Unique Pageviews Total'),
	        	);
	   			$output .= "<div style='width: 25%; margin-right: 10px; float:left;'>";
	   			$output .= "<table class='ga_table ga_table_highlight' id='ga_table_content_stats'>";
	   			foreach ($titles as $k => $title) {
	   				$value = isset($data[$k]) ? $data[$k] : 0;
	   				$valueF = number_format($value);
	   				$output .= "<tr><td class='bg_linear_gradient'>{$valueF}<div class='desc'>{$title}";
	   				if ($data_compare && isset($data_compare[$k])) {
		   				$valueCompare = $value - $data_compare[$k];
		   				$class = ($valueCompare < 0) ? "minus" : "plus";
		   				$valueCompareF = ($valueCompare < 0) ? str_replace('-', '- ', number_format($valueCompare)) : '+ ' . number_format($valueCompare);
		   				$output .= "<span class='compare {$class}'>{$valueCompareF}</span>";
	   				}	   				
	   				$output .= "</div></td></tr>";
	   			}
	   			$output .= "</table>";
	   			$output .= "</div>";	        	
        	}
   			$output .= "<div style='float: left; width: 73%;'>";
			
			//2nd: Get Top Sites by path sorted by pageviews
			$metrics = "ga:pageviews";
			$opt = array(
				'dimensions' => 'ga:pagePath',
				'sort' => '-ga:pageviews',
				'max-results' => $this->maxResults,
			);
			$data = array();
			$data['page'] = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics,$opt);
   			$output .= $this->_renderStatisticsTables($data,'content_pageviews','pageviews');
   			$output .= "</div>";
   			$output .= "<div style='clear:both;'></div>";
   			$data = $output;
        	$this->cache->save($data);
        }
        echo $data;
		
	}
	
	
	/**
	 * Get Traffic Sources (direct / referral / organic) (called via ajax)
	 * 
	 * @access public
	 * @return html
	 */
	public function ___executeTrafficsourcesstats(){
		
		if (!$data = $this->cache->get("ga_traffic_sources_stats",$this->cacheTime)) {						
			$metrics = "ga:visits";
			$opt = array(
				'dimensions' => 'ga:medium',
				'max-results' => $this->maxResults,
			);
			$data = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics,$opt);
   			$table  = "<table class='ga_table ga_table_highlight' id='ga_table_traffic_sources_stats'>";
   			$table .= "<tr>";
   			$i=0;
   			$columns = 3;
   			$tdwidth = 100 / $columns;
   			if (isset($data['rows']) && count($data['rows']) > 0) {
	   			$total = $data['totalsForAllResults']['ga:visits'];
	   			foreach ($data['rows'] as $k => $value) {
	   				if ($i % $columns == 0) $table .= "</tr><tr>";
	   				$title = $value[0];
	   				if ($k == 0) $title = 'Direct';
	   				$title = $this->_(ucfirst($title) . ' Traffic');
	   				$visits = $value[1];
	   				$percent = number_format(((100 / $total) * $visits),2);
	   				$table .= "<td style='width: {$tdwidth}%;' class='bg_linear_gradient'>{$percent} %<div class='desc'>{$title} ({$visits} ".$this->_('visits').")</div></td>";
	   				$i++;
	   			}	   			
   			} else {
	   			$table .= "<td>".$this->_('no results found')."</td>";
   			}
   			$table .= "</tr>";
   			$table .= "</table>";
   			$data = $table;
        	$this->cache->save($data);
        }
        echo $data;
	
	}
	
	
	/**
	 * Get the keywords (called via Ajax)
	 * 
	 * @access public
	 * @return html
	 */
	public function ___executeTrafficsourceskeywords() {
				
		if (!$data = $this->cache->get("ga_traffic_sources_keywords",$this->cacheTime)) {						
			$metrics = "ga:visits";
			$opt = array(
				'dimensions' => 'ga:keyword',
				'sort' => '-ga:visits',
				'max-results' => $this->maxResults,
			);
			$data = array();
      		$data['keyword'] = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics,$opt);
        	$data = $this->_renderStatisticsTables($data,'keywords');
        	$this->cache->save($data);
        }
        echo $data;

	}		


	/**
	 * Get referral Traffic (called via Ajax)
	 * 
	 * @access public
	 * @return html
	 */
	public function ___executeTrafficsourcesreferral() {
				
		if (!$data = $this->cache->get("ga_traffic_sources_referral",$this->cacheTime)) {						
			//1st: Visits by Domains
			$metrics = "ga:visits";
			$opt = array(
				'dimensions' => 'ga:source',
				'sort' => '-ga:visits',
				'max-results' => $this->maxResults,
				'filters' => 'ga:medium==referral',
			);
			$data = array();
      		$data['domain'] = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics,$opt);
			//2nd: Visits by Domains + path
			$opt['dimensions'] = 'ga:source,ga:referralPath';       	
      		$data_url = $this->ga_service->data_ga->get($this->accountId,$this->startDate,$this->endDate,$metrics,$opt);
        	//Rebuild rows array containing domain + path
        	$rows = array();
        	if (isset($data_url['rows'])) {
	        	foreach ($data_url['rows'] as $row) {
		        	$url  = 'http://www.' . $row[0] . $row[1];
		        	$url .= " (<a href='{$url}' target='_blank'>".$this->_('open')."</a>)";
		        	$rows[] = array($url,$row[2]);
	        	}
        	}
        	$data_url['rows'] = $rows;
        	$data['url'] = $data_url;
        	$data = $this->_renderStatisticsTables($data,'referral');
        	$this->cache->save($data);
        }
        echo $data;

	}		
	
	
	/**
	 * Change options (date range) (called via Ajax)
	 * 
	 * @access public
	 * @return void
	 */
	public function ___executeChangeoptions() {
	
		$input = wire('input');
		$startDate = $input->post->startDate;
		$endDate = $input->post->endDate;
		//Need to format the dates to YYYY-MM-DD?
		if ($startDate != '' && $endDate != '' && $this->dateFormatInput != 'Y-m-d') {
			$startTs = FieldtypeDatetime::stringToTimestamp($startDate,$this->dateFormatInput);
			$endTs = FieldtypeDatetime::stringToTimestamp($endDate,$this->dateFormatInput);
			$startDate = date('Y-m-d',$startTs);
			$endDate = date('Y-m-d',$endTs);			
		}
		$this->_saveModuleConfig(array('startDate' => $startDate, 'endDate' => $endDate));
		$this->_clearCache();
		return;
	
	}
		
	/**
	 * Render the required HTML-Markup to display the statistics loaded via Ajax
	 * 
	 * @access private
	 * @return html
	 */
	private function _renderInterface() {
		
		$form = $this->modules->get('InputfieldForm');
		$form->attr('id','ga_form');
		
		//Wrapper are used to separate main sections with JqueryWireTabs
		$wrapper_audience = new InputfieldWrapper();
		$wrapper_audience->attr('id','audienceWrapper');
		$wrapper_audience->attr('title',$this->_('Audience'));
		$wrapper_content = new InputfieldWrapper();
		$wrapper_content->attr('title',$this->_('Content'));
		$wrapper_content->attr('id','contentWrapper');
		$wrapper_traffic = new InputfieldWrapper();
		$wrapper_traffic->attr('title',$this->_('Traffic Sources'));
		$wrapper_traffic->attr('id','trafficWrapper');
		$wrapper_options = new InputfieldWrapper();
		$wrapper_options->attr('title',$this->_('Options'));		
		$wrapper_options->attr('id','optionsWrapper');		
		
		//Options to change the date range
		$fieldset = $this->modules->get('InputfieldFieldset');
		$fieldset->label = $this->_('Custom date range');
		$fieldset->description = $this->_('You can set a custom date range, for example to look at statistics from the past');
		$fieldset->notes = $this->_('By setting a custom date range, you will overwrite your default date range defined in the module config options. Check the option below to use the default range again!');
		$date_from = $this->modules->get('InputfieldDatetime');
		$date_from->label = $this->_('Start date');
		$date_from->attr('id','ga_startDate');
		//$date_from->attr('value',$this->startDate);
		$date_from->dateInputFormat = $this->dateFormatInput;
		$date_from->columnWidth = 50;
		$date_to = $this->modules->get('InputfieldDatetime');
		$date_to->label = $this->_('End date');
		$date_to->attr('id','ga_endDate');
		//$date_to->attr('value',$this->endDate);
		$date_to->dateInputFormat = $this->dateFormatInput;
		$date_to->columnWidth = 50;
		$checkbox = $this->modules->get('InputfieldCheckbox');
		$checkbox->label = $this->_('Reset custom date range');
		$checkbox->attr('id','ga_defaultDates');
		$button = $this->modules->get('InputfieldButton');
		$button->attr('id','ga_saveOptions');
		$button->attr('value',$this->_('Save'));
		$fieldset->append($date_from);
		$fieldset->append($date_to);
		$wrapper_options->append($fieldset);
		$wrapper_options->append($checkbox);
		$wrapper_options->append($button);
		
		//Audience - Visits
		$html  = "<div id='audience_visits_chart' class='ga_chart_lines load'></div>";
		$html .= "<div id='audience_visits_stats' class='load'></div>";		
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->label = $this->_("Visits");
		$field->attr('value',$html);
		$wrapper_audience->append($field);
		
		//Audience - Demographics
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->label = $this->_("Demographics");
		$field->columnWidth = 33;
		$html  = "<div class='ga_header_links'>";
		$html .= "<a href='#table_demographics_country' class='on'>".$this->_('Countries')."</a> / ";
		$html .= "<a href='#table_demographics_city'>".$this->_('Cities')."</a> / ";
		$html .= "<a href='#table_demographics_language'>".$this->_('Languages')."</a>";
		$html .= "</div>";
		$html .= "<div id='audience_demographics' class='load'></div>";
		$field->attr('value',$html);
		$wrapper_audience->append($field);
		
		//Audience - System
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->label = $this->_("System");
		$field->columnWidth = 33;
		$html  = "<div class='ga_header_links'>";
		$html .= "<a href='#table_system_browser' class='on'>".$this->_('Browsers')."</a> / ";
		$html .= "<a href='#table_system_os'>".$this->_('Operating Systems')."</a> / ";
		$html .= "<a href='#table_system_resolution'>".$this->_('Screen Resolutions')."</a>";
		$html .= "</div>";
		$html .= "<div id='audience_system' class='load'></div>";
		$field->attr('value',$html);
		$wrapper_audience->append($field);		

		//Audience - Mobile
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->label = $this->_("Mobile");
		$field->columnWidth = 33;
		$html  = "<div class='ga_header_links'>";
		$html .= "<a href='#table_mobile_os' class='on'>".$this->_('Operating Systems')."</a> / ";
		$html .= "<a href='#table_mobile_resolution'>".$this->_('Screen Resolutions')."</a>";
		$html .= "</div>";
		$html .= "<div id='audience_mobile' class='load'></div>";
		$field->attr('value',$html);
		$wrapper_audience->append($field);		
		
		//Content Stats
		$html  = "<div id='content_pageviews_chart' class='ga_chart_lines load'></div>";
		$html .= "<div id='content_stats' class='load'></div>";
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->label = $this->_("Pageviews");
		$field->attr('value',$html);
		$wrapper_content->append($field);
		
		//Traffic Sources Statistics
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->label = $this->_("Statistics");
		$field->attr('value',"<div id='traffic_sources_stats' class='load'></div>");
		$wrapper_traffic->append($field);

		//Traffic - Kewyords
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->label = $this->_("Keywords");
		$field->columnWidth = 50;
		$field->attr('value',"<div id='traffic_sources_keywords' class='load'></div>");
		$wrapper_traffic->append($field);		

		//Traffic - Referral Traffic
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->label = $this->_("Referral Traffic");
		$field->columnWidth = 50;
		$html  = "<div class='ga_header_links'>";
		$html .= "<a href='#table_referral_domain' class='on'>".$this->_('Domain')."</a> / ";
		$html .= "<a href='#table_referral_url'>".$this->_('URL')."</a>";
		$html .= "</div>";
		$html .= "<div id='traffic_sources_referral' class='load'></div>";
		$field->attr('value',$html);
		$wrapper_traffic->append($field);		
		
		$form->append($wrapper_audience);
		$form->append($wrapper_content);
		$form->append($wrapper_traffic);
		$form->append($wrapper_options);
		
		$startDate = strftime($this->dateFormat,strtotime($this->startDate));
		$endDate = strftime($this->dateFormat,strtotime($this->endDate));
		return "<h2>{$startDate} - {$endDate}</h2>" . $form->render();

	}
		
	/**
	 * Handle authentication with Google over Oauth. 
	 * Display a button to authenticate and stores accessToken in Module afterwards.
	 * 
	 * @access private
	 * @return html
	 */
	private function _authenticate() {

		if ($this->input->get->code) {
			$this->ga_client->authenticate();
			$accessToken = $this->ga_client->getAccessToken();
			$this->_saveModuleConfig(array('accessToken' => $accessToken));
			$this->session->redirect('./');
		} else {
			$authUrl = $this->ga_client->createAuthUrl();
			$fieldset = $this->modules->get('InputfieldFieldset');
			$fieldset->description = $this->_("You must login with your Google Account and grant the API access to your Google Analytics Statistics. You will be redirected to this page again afterwards to choose the Analytics Account.\nNote: This step is only necessary once, an Access Token is stored in the Database.");			
			$button = $this->modules->get('InputfieldButton');
			$button->title = 'test';
			$button->attr('id+name','ga_oauth');
			$button->attr('href',$authUrl);
			$button->attr('value',$this->_('Authenticate'));
			$fieldset->add($button);
			return $fieldset->render();
		}

	}
	
	
	/**
	 * Display a Dropdown to choose the GA Account (Statistics are displayed from this Account)
	 * 
	 * @access private
	 * @return html
	 */
	private function _selectAccount() {
		
		if ($this->input->post->account_id !== null) {
			$account_id = $this->input->post->account_id;
			$account_id = "ga:$account_id";
			$this->_saveModuleConfig(array('accountId' => $account_id));
			$this->session->redirect('./');			
		}
		
		//Create form to select GA Account
		$this->_clearCache(); //In case the User revoked Authentication or changed GA Account -> empty Cache 
		$form = $this->modules->get('InputfieldForm');
		$form->attr('name+id','ga_form_set_account');
		$select = $this->modules->get('InputfieldSelect');
		$select->attr('name+id','account_id');
		$select->label = $this->_('Choose Google Analytics Account');
		$button = $this->modules->get('InputfieldSubmit');
		$button->attr('id+name','ga_set_account');
		$button->attr('value',$this->_('Save'));
		
		//Build Array with the ga_id as key, account name as value. Note: The correct gaID is found only in the $profiles array 
		$props = $this->ga_service->management_webproperties->listManagementWebproperties("~all");
		$profiles = $this->ga_service->management_profiles->listManagementProfiles("~all", "~all");
		$accounts = array();
		foreach ($props['items'] as $k => $account) {
			//Need to find the coorect ga_id in the $profiles array... :/
			foreach ($profiles['items'] as $pk => $profile) {
				if ($account['internalWebPropertyId'] == $profile['internalWebPropertyId']) {
					$ga_id = $profile['id'];
					$account_name = $account['name'];
					$accounts[$ga_id] = $account_name;
					break;
				}
			}
		}
		$select->addOptions($accounts);
		$form->append($select);
		$form->append($button);
		return $form->render();

	}
	
	
	/**
	 * Load and initialize the Google Analytics API
	 * 
	 * @access private
	 * @return void
	 */
	private function _loadGoogleApi() {

		include_once($this->config->paths->ProcessGoogleAnalytics . 'google_api_client/src/Google_Client.php');
		include_once($this->config->paths->ProcessGoogleAnalytics . 'google_api_client/src/contrib/Google_AnalyticsService.php');
		$this->ga_client = new Google_Client();
		$this->ga_client->setClientId($this->clientId);
		$this->ga_client->setClientSecret($this->clientSecret);
		$this->ga_client->setRedirectUri($this->redirectUri);
		$this->ga_service = new Google_AnalyticsService($this->ga_client);
		if ($this->accessToken) { //Set the accessToken to ga client instance
			$this->ga_client->setAccessToken($this->accessToken);	
		}	

	}
	
	
	/**
	 * Check if the module is configured correctly
	 * 
	 * @access private
	 * @return boolean
	 */
	private function _checkConfig() {
		
		if(wire('input')->get->uninstalled || wire('input')->get->name == $this->className) return true; //Prepend showing warnings on module edit mask...
		$errors = array();
		if (!$this->clientId) $errors[] = $this->_('API Key is missing');
		if (!$this->clientSecret) $errors[] = $this->_('Client Secret Key is missing');
		if (!$this->redirectUri) $errors[] = $this->_('Redirect URI is missing');
		if (!$this->developerKey) $errors[] = $this->_('Developer Key is missing');
		if (count($errors) > 0) {
			$this->errors = true;
			foreach ($errors as $error) {
				$this->error($error);		
			}
			return false;
		}
		return true;

	}
	
	
	/**
	 * Config Options for this Module
	 * 
	 * @access public
	 * @static
	 * @param array $data
	 * @return InputfieldWrapper
	 */
	static public function getModuleConfigInputfields(array $data) {
		
		$data = array_merge(self::$defaults, $data);
		$modules = wire('modules');
		$session = wire('session');
		$input = wire('input');
		$config = wire('config');
		$class = __CLASS__;
		$fields = new InputfieldWrapper();
		
		//Guess redirect URI
		if (trim($data['redirectUri']) == '') {
			$redirectUri  = $config->https ? 'https://' : 'http://';
			$redirectUri .= $config->httpHost . $config->urls->admin . self::PAGE_NAME . '/';
			$data['redirectUri'] = $redirectUri;
		} 
		
		//If dateRange or maxResults has changed, reset any custom dates and also remove the generated cache files...
		$session->ga_dateRange = $data['dateRange'];
		$session->ga_maxResults = $data['maxResults'];
		$session->ga_compareToPrevious = $data['compareToPrevious'];
		if ($input->post->dateRange) {
			if ($input->post->dateRange != $session->ga_dateRange || 
				$input->post->maxResults != $session->ga_maxResults ||
				$input->post->compareToPrevious != $session->ga_compareToPrevious) {
				$cache = $modules->get('MarkupCache');
				foreach (self::$cacheFiles as $file) $cache->get($file,0);
				$session->remove('ga_dateRange');
				$session->remove('ga_maxResults');
				$session->remove('ga_compareToPrevious');
				//Reset values directly via post like this seems not to be the cleanest way... but works
				$input->post->startDate = '';
				$input->post->endDate = '';
			}
		}
		
		//Revoke authentication checked previous? Remove AccessToken / Account
		$revoke = $input->post->_revokeAuth ? true : false;
		if ($revoke) {
			$fields->message('Removed AccessToken - you will need to authenticate again');
			$input->post->accountId = '';
			$input->post->accessToken = '';
		}
		
		//Hidden Fields cannot be configured by User, but changed by Module
		$field = $modules->get("InputfieldHidden");
		$field->attr('name+id', 'startDate');
		$field->attr('value', $data['startDate']);
		$fields->append($field);

		$field = $modules->get("InputfieldHidden");
		$field->attr('name+id', 'endDate');
		$field->attr('value', $data['endDate']);
		$fields->append($field);

		$field = $modules->get("InputfieldHidden");
		$field->attr('name+id', 'accessToken');
		$field->attr('value', $data['accessToken']);
		$fields->append($field);	
				
		//Client ID
		$field = $modules->get("InputfieldText");
		$field->attr('name+id', 'clientId');
		$field->attr('value', $data['clientId']);
		$field->label = "Client ID";
		$field->description = 'Enter the Client ID from the Google APIs console';
		$fields->append($field);
		
		//Client secret Key
		$field = $modules->get("InputfieldText");
		$field->attr('name+id', 'clientSecret');
		$field->attr('value', $data['clientSecret']);
		$field->label = "Client Secret";
		$field->description = 'Enter the Client Secret from the Google APIs console';
		$fields->append($field);

		//API Key
		$field = $modules->get("InputfieldText");
		$field->attr('name+id', 'developerKey');
		$field->attr('value', $data['developerKey']);
		$field->label = "API Key (Developer Key)";
		$field->description = 'Enter the API key from the Google APIs console';
		$fields->append($field);

		//Redirect URI
		$field = $modules->get("InputfieldText");
		$field->attr('name+id', 'redirectUri');
		$field->attr('value', $data['redirectUri']);
		$field->label = "Redirect URI";
		$field->description = "URI of the Google Analytics page. Must match one url provided in the Google APIs Console";
		$fields->append($field);
		
		//Ga Account ID - only display when Account was chosen with dropdown before
		$field = ($data['accountId']) ? $modules->get("InputfieldText") : $modules->get("InputfieldHidden");
		$field->attr('name+id', 'accountId');
		$field->attr('value', $data['accountId']);
		$field->label = "Google Analytics Account Id";
		$field->description = "Delete this Id and you can choose another Analytics Account (Domain) from the Dropdown again.";
		$fields->append($field);			
				
		$field = $modules->get('InputfieldSelect');
		$field->attr('name+id', 'dateRange');
		$field->attr('value', $data['dateRange']);
		$field->label = "Default date range";
		$field->description = "Select the default date range to display the statistics from";
		$field->addOptions(self::$dates);
		$fields->append($field);
		
		//Compare some results to previous dateRange?
		$field = $modules->get('InputfieldCheckbox');
		$field->attr('name', 'compareToPrevious');
		$checked = $data['compareToPrevious'] ? 'checked' : '';
		$field->attr('value', 1);
		$field->attr('checked', $checked);
		$field->label = "Compare number of visits / pageviews to previous date range?";
		$field->description = "If checked, the module will compute and show the difference (+/-) of some data compared to the previous dateRange.";
		$fields->append($field);		
		
		//Max Results
		$field = $modules->get("InputfieldInteger");
		$field->attr('name+id', 'maxResults');
		$field->attr('value', $data['maxResults']);
		$field->label = "Max number of results returned by the queries";
		$fields->append($field);

		//Cache Time for Results
		$field = $modules->get("InputfieldInteger");
		$field->attr('name+id', 'cacheTime');
		$field->attr('value', $data['cacheTime']);
		$field->label = "Cache Time (seconds)";
		$field->description = "How long do you want to cache the results? Default: 3 hours";
		$fields->append($field);

		//Chart Color
		$field = $modules->get("InputfieldText");
		$field->attr('name+id', 'chartColor');
		$field->attr('value', $data['chartColor']);
		$field->label = "Chart Color";
		$field->description = "Hex Code used by jqplot to render the chart lines";
		$fields->append($field);

		//Date Format for date range in the header
		$field = $modules->get("InputfieldText");
		$field->attr('name+id', 'dateFormat');
		$field->attr('value', $data['dateFormat']);
		$field->label = "Date Format Header";
		$field->description = "String used by php's strftime function to format From - To date in the Header";
		$fields->append($field);

		//Date Format for Datetime Inputfields
		$field = $modules->get("InputfieldText");
		$field->attr('name+id', 'dateFormatInput');
		$field->attr('value', $data['dateFormatInput']);
		$field->label = "Date Format Inputfields";
		$field->description = "String used by php's date function to set the format of the InputfieldDatetime fields in the Options section";
		$fields->append($field);

		//Revoke authentication
		$name = "_revokeAuth"; // prefix with '_' tells ProcessModule not to save it in module's config data
		$field = $modules->get('InputfieldCheckbox');
		$field->attr('name', $name);
		$field->attr('value', 1);
		$field->attr('checked', '');
		$field->label = "Revoke Authentication?";
		$field->description = "Check to revoke Oauth Authentication with Google";
		$fields->append($field);

		return $fields;
	}
}